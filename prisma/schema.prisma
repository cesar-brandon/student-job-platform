// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ENTERPRISE
  ADMIN
  STUDENT
}

enum VoteType {
  UP
  DOWN
}

enum Career {
  ET
  FT
  AE
  CF
  DS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String         @unique
  username      String?        @unique
  email         String         @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  password      String?
  role          UserRole       @default(STUDENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Post          Post[]
  readPosts     Post[]         @relation("ReadPosts")
  Student       Student[]
  Enterprise    Enterprise[]
  CommentVote   CommentVote[]
  Comment       Comment[]
  Vote          Vote[]
  BookMark      Bookmark[]
  Subscription  Subscription[]
  accounts      Account[]
  sessions      Session[]
  Apply         Apply[]
  Feedback      Feedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id          String  @id @default(cuid())
  name        String
  lastname    String
  email       String? @unique
  dni         Int?    @unique
  state       String?
  code        Int?    @unique
  age         Int?
  phoneNumber Int?    @unique
  career      Career?
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?
  resume      Json?
  resumeUrl   String?
}

model Enterprise {
  id          String         @id @default(cuid())
  name        String         @unique
  email       String         @unique
  address     String?
  phone       String?
  description Json?
  urls        String[]
  User        User?          @relation(fields: [userId], references: [id])
  userId      String?
  subscribers Subscription[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Subscription {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId String

  @@id([userId, enterpriseId])
}

enum FilterType {
  SELECT
  MULTISELECT
  TEXT
  NUMBER
  DATE
}

model Filter {
  id      String     @id @default(cuid())
  title   String
  type    FilterType
  options Json
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  filters   String[]
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  applies   Apply[]
  comments  Comment[]
  votes     Vote[]
  bookmarks Bookmark[]
  readBy    User[]     @relation("ReadPosts")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?

  replyToId String?   @map("replyTo")
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model Bookmark {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
}

enum ApplyStatus {
  APPLIED
  VIEWED
  PENDING
  ACCEPTED
  REJECTED
}

model Apply {
  userId    String
  postId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    ApplyStatus @default(APPLIED)
  user      User        @relation(fields: [userId], references: [id], map: "user")
  Post      Post        @relation(fields: [postId], references: [id], map: "post")

  @@id([userId, postId])
}

model Feedback {
  id        String   @id @default(cuid())
  score     Int
  text      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
